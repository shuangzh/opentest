package com.cmsz.cmup.fileImporting.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.cmsz.cmup.commons.logging.alarm.AlarmLogHandler;
import com.cmsz.cmup.commons.logging.system.SystemLogHandler;
import com.cmsz.cmup.fileImporting.constant.FileHandleConstant;
import com.cmsz.cmup.fileImporting.dao.FileStatusDAO;
import com.cmsz.cmup.fileImporting.entity.FileStatusEntity;
import com.cmsz.cmup.fileImporting.utils.FileParamUtil;
import com.cmsz.cmup.frame.base.service.BaseInterface;
import com.cmsz.cmup.frame.constant.Result;
import com.cmsz.cmup.frame.model.ReturnResult;

/**
 * 文件解析入库服务类
 * 
 * @author louiszhang
 * @time 20162016年4月28日下午2:49:20
 */
@Component("fileImportingService")
public class FileImportingService extends BasicService implements BaseInterface {
	private static SystemLogHandler systemLogger = SystemLogHandler.getLogger(FileImportingService.class);
	private static AlarmLogHandler alarmLogger = AlarmLogHandler.getLogger(FileImportingService.class);

	@Resource
	FileStatusDAO fileStatusDAO;

	@Override
	public ReturnResult doService(Map<String, String> variableMap) throws Exception {

		List<FileStatusEntity> list = new ArrayList<>();
		String msgString = null;

		Map<String, String> infoMap = new HashMap<>();
		try {
			infoMap = super.getFileTypeInfo(variableMap);
		} catch (Exception e) {
			msgString = "Exception happend while connecting to database, failed to get the file configuration..." + "("
					+ "数据库连接出错，查询文件配置信息失败..." + ")";
			return new ReturnResult(Result.FAILED, msgString);
		}

		if (null == infoMap || infoMap.isEmpty()) {
			msgString = "There is no configuration for the serviceID that named as "
					+ variableMap.get(FileHandleConstant.FILE_SERVICE_ID) + " in the database..." + "("
					+ "数据库中不存在serviceID为" + variableMap.get(FileHandleConstant.FILE_SERVICE_ID) + "的配置信息..." + ")";
			systemLogger.error(msgString, variableMap);
			alarmLogger.error(msgString, variableMap);
			return new ReturnResult(Result.FAILED, msgString);
		}
		// 将查询出来的配置信息存入参数Map
		variableMap.putAll(infoMap);

		// 判断文件是否已经正确入库
		try {
			if (super.isInsertedDB(variableMap)) {
				msgString = infoMap.get(FileHandleConstant.FILE_TYPE_DESC)
						+ " files have been stored into database already, returning SUCCESS directly..." + "("
						+ infoMap.get(FileHandleConstant.FILE_TYPE_DESC) + "文件已经正确入库，直接返回处理成功..." + ")";
				return new ReturnResult(Result.SUCCESS, msgString);
			}
		} catch (Exception e) {
			msgString = "Exception happend while connecting to database, failed to ckeck whether "
					+ infoMap.get(FileHandleConstant.FILE_TYPE_DESC) + " files were put into database..." + "("
					+ "数据库连接出错，查询" + infoMap.get(FileHandleConstant.FILE_TYPE_DESC) + "文件是否入库成功状态失败..." + ")";
			return new ReturnResult(Result.FAILED, msgString);
		}

		// 判断文件是否到达
		list = super.isArrived(variableMap);
		if (!(list != null && list.size() > 0)) {
			msgString = infoMap.get(FileHandleConstant.FILE_TYPE_DESC)
					+ " files are not arrived properly right now or failed to check the status of this kind of files, please try again later..."
					+ "(" + infoMap.get(FileHandleConstant.FILE_TYPE_DESC) + "文件尚未到达或查询文件状态失败，请稍后重试..." + ")";
			return new ReturnResult(Result.FAILED, msgString);
		}

		// 处理文件
		try {
			FileParamUtil fileParamUtil = new FileParamUtil(variableMap, infoMap, list);
			super.fileHandle(fileParamUtil);
		} catch (Exception e) {
			msgString = infoMap.get(FileHandleConstant.FILE_TYPE_DESC)
					+ " file;Exception happend while handling the file, failed for the process..." + "("
					+ "文件处理出错，处理流程失败..." + ")";
			return new ReturnResult(Result.FAILED, msgString);
		}

		// 结果处理
		fileStatusDAO.updateInsertDBSuccessFileStatus(variableMap);
		msgString = infoMap.get(FileHandleConstant.FILE_TYPE_DESC)
				+ " file;Success for storing the file data into database, finished for the whole process..." + "("
				+ "文件数据全部入库成功，处理流程全部完成..." + ")";
		systemLogger.info(msgString, variableMap);
		return new ReturnResult(Result.SUCCESS, msgString);
	}

}
