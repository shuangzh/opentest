/**
 * louiszhang
 *上午10:45:04
 */
package com.cmsz.cmup.fileImporting.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.cmsz.cmup.commons.logging.alarm.AlarmLogHandler;
import com.cmsz.cmup.commons.logging.mapper.AlarmLogBean;
import com.cmsz.cmup.commons.logging.system.SystemLogHandler;
import com.cmsz.cmup.fileImporting.constant.FileHandleConstant;
import com.cmsz.cmup.fileImporting.entity.FileStatusEntity;
import com.cmsz.cmup.fileImporting.utils.FileParamUtil;
import com.cmsz.cmup.frame.base.service.BaseInterface;
import com.cmsz.cmup.frame.constant.Result;
import com.cmsz.cmup.frame.model.ReturnResult;

/**
 * service for files directly transporting(文件透传服务)
 * 
 * @author louiszhang
 * @time 20162016年8月15日上午10:45:04
 */
@Component("fileDirectTransService")
public class FileDirectTransService extends BasicService implements BaseInterface {
	private static SystemLogHandler systemLogger = SystemLogHandler.getLogger(FileDirectTransService.class);
	private static AlarmLogHandler alarmLogger = AlarmLogHandler.getLogger(FileDirectTransService.class);

	@Override
	public ReturnResult doService(Map<String, String> variableMap) throws Exception {
		List<FileStatusEntity> list = new ArrayList<>();
		String msgString = null;

		// 获取文件类型配置信息
		Map<String, String> infoMap = new HashMap<>();
		try {
			infoMap = super.getFileTypeInfo(variableMap);
		} catch (Exception e) {
			msgString = "Exception happend while connecting to database, failed to get the file configuration..." + "("
					+ "数据库连接出错，查询文件配置信息失败..." + ")";
			return new ReturnResult(Result.FAILED, msgString);
		}
		// 将查询出来的配置信息存入参数Map
		variableMap.putAll(infoMap);

		// 检查文件是否透传
		if (!isDrectTrans(infoMap, variableMap)) {
			msgString = "According to the OUT_GOING_PATH configuration of "
					+ infoMap.get(FileHandleConstant.FILE_TYPE_DESC)
					+ " files in the table FILE_SERVICE_INFO, there is no need to transport"
					+ infoMap.get(FileHandleConstant.FILE_TYPE_DESC) + "files, please check it mannully..." + "("
					+ "配置表显示" + infoMap.get(FileHandleConstant.FILE_TYPE_DESC) + "文件无需透传，请人工核实..." + ")";
			return new ReturnResult(Result.FAILED, msgString);
		}

		// 获取已正常入库文件的状态数据
		list = super.getInsertedDBFiles(variableMap);
		if (!(list != null && list.size() > 0)) {
			msgString = variableMap.get("fileTypeDesc")
					+ " file;Can not find the records of  the files that are stored into database successfully, failed to copy the files to the outgoing folder..."
					+ "(" + "无法查询到文件正确入库的记录，透传文件复制到下发目录失败..." + ")";
			systemLogger.warn(msgString, variableMap);
			alarmLogger.warn(msgString, variableMap);
			AlarmLogBean alarmLogBean = new AlarmLogBean(msgString, variableMap.get("busiLine"),
					variableMap.get("province"), this.getClass());
			alarmLogBeanMapper.insert(alarmLogBean);
			return new ReturnResult(Result.FAILED, msgString);
		}

		// 文件透传处理
		try {
			FileParamUtil fileParamUtil = new FileParamUtil(variableMap, infoMap, list);
			super.fileDirectTransHandle(fileParamUtil);
		} catch (Exception e) {
			msgString = infoMap.get(FileHandleConstant.FILE_TYPE_DESC)
					+ " file;Exception happend while handling the file, failed for the process..." + "("
					+ "文件透传处理出错，处理流程失败..." + ")";
			return new ReturnResult(Result.FAILED, msgString);
		}

		// 结果处理
		msgString = infoMap.get(FileHandleConstant.FILE_TYPE_DESC)
				+ " file;Success for directly transporting files, finished for the whole process..." + "("
				+ "文件透传全部成功，透传处理流程全部完成..." + ")";
		systemLogger.info(msgString, variableMap);
		return new ReturnResult(Result.SUCCESS, msgString);

	}

}
