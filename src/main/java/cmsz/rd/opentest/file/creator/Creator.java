package cmsz.rd.opentest.file.creator;

import cmsz.rd.opentest.exceptions.ParamValidException;
import com.thoughtworks.xstream.XStream;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by admin on 2017/4/14.
 */
public class Creator {

    private LineConf lineConf = new LineConf();

    private List<LineConf> datas = new ArrayList<>();

    private boolean lineConfUpdated;

    public void setLineConfUpdated(boolean lineConfUpdated) {
        this.lineConfUpdated = lineConfUpdated;
    }

    public void xmlLineConf(String xml) {
        XStream xs = new XStream();
        xs.setMode(XStream.NO_REFERENCES);
        xs.processAnnotations(LineConf.class);
        InputStream in = new ByteArrayInputStream(xml.getBytes());

        LineConf lineConf = (LineConf) xs.fromXML(in);
        this.lineConf = lineConf;
        this.lineConfUpdated = true;
    }

    public void append(int i) {
        if (i > 0) {
            for (int k = 0; k < i; k++) {
                if (lineConfUpdated) {
                    LineConf n = (LineConf) this.lineConf.clone();
                    datas.add(n);
                    lineConfUpdated = false;
                } else {
                    lineConf.next();
                    LineConf nn = (LineConf) this.lineConf.clone();
                    datas.add(nn);
                }
            }
        }
    }

    public void remove(int index, int count){
        index = index -1;
        for(int i=0; i<count; i++){
            if(datas.size() > index) {
                datas.remove(index);
            }
        }
    }

    public int rowCount() {
        return datas.size();
    }

    public void insert(int index, int count){
        index = index -1;
        if(index > datas.size() )
            throw new IndexOutOfBoundsException("insert index out of  file length");

        if(count > 0){
            for (int k = 0; k < count; k++) {
                if (lineConfUpdated) {
                    LineConf n = (LineConf) this.lineConf.clone();
                    datas.add(index, n);
                    lineConfUpdated = false;
                } else {
                    lineConf.next();
                    LineConf nn = (LineConf) this.lineConf.clone();
                    datas.add(index, nn);
                }
                index++;
            }
        }
    }

    public void print() {
        for (LineConf lc : datas) {
            System.out.println(lc.assemble());
        }
    }

    public File createFile(String filename){
        File file = new File(filename);
        File parent = file.getParentFile();

        if(!parent.exists()){
            parent.mkdirs();
        }
        if(!file.exists()){
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                throw  new RuntimeException("Create file failed:"+ filename, e);
            }
        }
        try {
            PrintWriter pw=new PrintWriter(file);
            for (LineConf lc : datas) {
                pw.println(lc.assemble());
            }
            pw.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException("Open file failed:"+ filename, e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Write to file failed:"+filename, e);
        }
        return file;
    }

    public LineConf getLineConf() {
        return lineConf;
    }

    public void setLineConf(LineConf lineConf) {
        this.lineConf = lineConf;
    }

    public List<LineConf> getDatas() {
        return  datas;
    }

    public void modify(int rowIndex, int columIndex, String[] param)
    {
        rowIndex = rowIndex -1;
        columIndex = columIndex -1;
        LineConf lineConf = datas.get(rowIndex);
        FieldConf fieldConf=lineConf.getFields().get(columIndex);
        if (param == null || param.length < 3)
            throw new ParamValidException();
        fieldConf.setName(param[0]);
        fieldConf.setFormat(param[1]);
        fieldConf.setValue(param[2]);
        if (param.length >= 4)
            fieldConf.setGen(param[3]);

        if (param.length >= 5)
            fieldConf.setLen(Integer.parseInt(param[4]));
        if (param.length >= 7) {
            fieldConf.setP1(Integer.parseInt(param[5]));
            fieldConf.setP2(Integer.parseInt(param[6]));
        }
    }

    public  void modifyValue(int rowIndex, String fieldname, String value){
        rowIndex = rowIndex -1;
        LineConf lineConf = datas.get(rowIndex);
        List<FieldConf> list = lineConf.getFields();
        for(FieldConf c: list){
            if(c.getName().compareToIgnoreCase(fieldname)==0){
                c.setValue(value);
                return;
            }
        }
    }






}
