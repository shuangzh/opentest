package cmsz.rd.opentest.file.creator;


import cmsz.rd.opentest.exceptions.ParamValidException;
import cmsz.rd.opentest.file.validator.Field;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamImplicit;
import org.apache.commons.lang.StringUtils;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by admin on 2017/4/14.
 */
@XStreamAlias("line")
public class LineConf implements Serializable, Cloneable {

    private List<FieldConf> fields;
    private String style = "sep";
    private String fs = "|";

    public Object clone() {
        try {
            LineConf lineConf = (LineConf) super.clone();
            if (fields != null) {
                lineConf.fields = new ArrayList<>();
                for (FieldConf fc : fields) {
                    lineConf.fields.add((FieldConf) fc.clone());
                }
            }
            return lineConf;
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return null;
    }

    public String assemble() {
        StringBuilder sb = new StringBuilder();
        if ("sep".equals(style)) {
            for (FieldConf fc : fields) {
                if (fc.getValue() == null) {
                    sb.append(fs);
                    continue;
                } else if (fc.getFormat() == null || StringUtils.isBlank(fc.getFormat())) {
                    sb.append(fc.getValue());
                    sb.append(fs);
                    continue;
                } else {
                    sb.append(format(fc.getFormat(), fc.getValue()));
                    sb.append(fs);
                    continue;
                }
            }
        } else if ("fix".equals(style)) {
            int index = 1;
            for (FieldConf fc : fields) {
                String s = format(fc.getFormat(), fc.getValue());
                if (fc.getLen() > 0)
                    assert fc.getLen() == s.length();
                if (fc.getP1() > 0 && fc.getP2() > 0) {
                    assert fc.getP1() == index;
                    assert fc.getP2() == index + fc.getLen() - 1;
                }
                index = index + fc.getLen();
                sb.append(s);
            }
        }
        if ("sep".equals(style))
            return sb.substring(0, sb.length() - fs.length());
        return sb.toString();
    }

    public void next() {
        for (FieldConf fc : fields) {
            String gen = fc.getGen();
            if (gen.startsWith(GEN.NUMBER_INCR)) {
                Long l = Long.parseLong(fc.getValue());
                l = l + 1;
                fc.setValue(l.toString());
            } else if (gen.startsWith(GEN.NUMBER_DESC)) {
                Long l = Long.parseLong(fc.getValue());
                l = l - 1;
                fc.setValue(l.toString());
            }
        }
    }

    public void addFieldConf(String[] param) {
        if (param == null || param.length < 3)
            throw new ParamValidException();
        FieldConf fieldConf = new FieldConf();
        fieldConf.setName(param[0]);
        fieldConf.setFormat(param[1]);
        fieldConf.setValue(param[2]);

        if (param.length >= 4)
            fieldConf.setGen(param[3]);

        if (param.length >= 5)
            fieldConf.setLen(Integer.parseInt(param[4]));
        if (param.length >= 7) {
            fieldConf.setP1(Integer.parseInt(param[5]));
            fieldConf.setP2(Integer.parseInt(param[6]));
        }
        if (this.fields == null)
            this.fields = new ArrayList<>();
        this.fields.add(fieldConf);
    }

    public void addFieldConfs(String[][] params) {
        for (String[] sa : params) {
            addFieldConf(sa);
        }
    }


    private String format(String format, String value) {
        format = format.trim();
        if (format.endsWith("d")) {
            long l = Long.parseLong(value);
            return String.format(format, l);
        } else
            return String.format(format, value);
    }

    public List<FieldConf> getFields() {
        return fields;
    }

    public void setFields(List<FieldConf> fields) {
        this.fields = fields;
    }

    public String getStyle() {
        return style;
    }

    public void setStyle(String style) {
        this.style = style;
    }

    public String getFs() {
        return fs;
    }

    public void setFs(String fs) {
        this.fs = fs;
    }

    //#***********************************************************

}
