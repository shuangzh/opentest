package cmsz.rd.opentest.file.creator;


import org.apache.commons.lang.StringUtils;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by admin on 2017/4/14.
 */
public class LineConf implements Serializable, Cloneable {

    private List<FieldConf> fieldConfs;
    private String style = "sep";
    private String fs = "|";

    public Object clone() {
        try {
            LineConf lineConf = (LineConf) super.clone();
            if (fieldConfs != null) {
                lineConf.fieldConfs = new ArrayList<>();
                for (FieldConf fc : fieldConfs) {
                    lineConf.fieldConfs.add((FieldConf) fc.clone());
                }
            }
            return lineConf;
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return null;
    }

    public String assemble() {
        StringBuilder sb = new StringBuilder();
        if (style == "sep") {
            for (FieldConf fc : fieldConfs) {
                if (fc.getValue() == null) {
                    sb.append(fs);
                    continue;
                } else if (fc.getFormat() == null || StringUtils.isBlank(fc.getFormat())) {
                    sb.append(fc.getValue());
                    sb.append(fs);
                    continue;
                } else {
                    sb.append(format(fc.getFormat(), fc.getValue()));
                    sb.append(fs);
                    continue;
                }
            }
        } else if (style == "fix") {
            int index = 1;
            for (FieldConf fc : fieldConfs) {
                String s = format(fc.getFormat(), fc.getValue());
                if (fc.getLen() > 0)
                    assert fc.getLen() == s.length();
                if (fc.getP1() > 0 && fc.getP2() > 0) {
                    assert fc.getP1() == index;
                    assert fc.getP2() == index + fc.getLen() - 1;
                }
                index = index + fc.getLen();
                sb.append(s);
            }
        }
        if (style == "sep")
            return sb.substring(0, sb.length() - 1);
        return sb.toString();
    }

    public void next() {
        for (FieldConf fc : fieldConfs) {
            String gen = fc.getGen();
            if (gen.startsWith(GEN.NUMBER_INCR)) {
                Long l = Long.parseLong(fc.getValue());
                l = l + 1;
                fc.setValue(l.toString());
            } else if (gen.startsWith(GEN.NUMBER_DESC)) {
                Long l = Long.parseLong(fc.getValue());
                l = l - 1;
                fc.setValue(l.toString());
            }
        }
    }

    private String format(String format, String value) {
        format = format.trim();
        if (format.endsWith("d")) {
            long l = Long.parseLong(value);
            return String.format(format, l);
        } else
            return String.format(format, value);
    }

    //#***********************************************************

}
