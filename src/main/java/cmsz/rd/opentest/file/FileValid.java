package cmsz.rd.opentest.file;

import cmsz.rd.opentest.exceptions.NotEqualException;
import cmsz.rd.opentest.file.validator.impl.ValidatorImpl;
import cmsz.rd.opentest.utils.MapUtil;
import org.codehaus.plexus.util.FileUtils;

import java.io.*;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

/**
 * Created by admin on 2017/4/13.
 */
public class FileValid {

    ValidatorImpl validator = null;
    List<Map<String, String>> datalist = null;

    void assertFormate(String filepath, String formatpath) {

        String context = null;
        try {
            context = FileUtils.fileRead(formatpath);
        } catch (IOException e) {
            throw new RuntimeException("read format file failed :" + formatpath);
        }

        validator = new ValidatorImpl();
        validator.setRegxFile(context);
        try {
            InputStream inputStream = new FileInputStream(filepath);
            validator.validate(inputStream, new HashMap<String, String>());
            this.datalist = validator.dataForList();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException("file not exist :" + filepath, e);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("file valied failde", e);
        }
    }

//    public Map<String, String> getRow(int rowIndex) {
//        return  getRow(rowIndex, null);
//    }
//
//
//    public Map<String, String> getRow(int rowIndex, String[] ignores){
//        rowIndex = rowIndex -1;
//        Map<String, String> m = datalist.get(rowIndex);
//        return MapUtil.remove(m, ignores);
//    }
//
//    public List<Map<String, String>> getRowList(int rowIndex, int cout, String[] ignores){
//        rowIndex = rowIndex -1;
//        List<Map<String, String>> list = datalist.subList(rowIndex, rowIndex+ cout);
//        return  MapUtil.removeColumn(list, ignores);
//    }
//
//
//    public List<Map<String, String>> getRowList(int rowIndex, int cout){
//        return  this.getRowList(rowIndex, cout, null);
//    }

    public void assertHasRow(String keycolumn , Map<String, String> expectrow, String[] ignores, Map<String, String> namemap){
        Map m = MapUtil.remove(expectrow, ignores);
        m = MapUtil.renameKey(m, namemap);
        Map not = MapUtil.findNotMatched(datalist, m, keycolumn);
        if(not !=null){
            throw new NotEqualException();
        }
    }

    public void assertHasRowList(String keycolumn , List<Map<String, String>> expectlist, String[] ignores, Map<String, String> namemap){
        List elist = MapUtil.removeColumn(expectlist, ignores);
        elist = MapUtil.renameColunmKey(elist, namemap);
        List<Map> notlist= MapUtil.findNotMatched(datalist, elist, keycolumn);
        if(notlist != null){
            throw new NotEqualException();
        }
    }

}
