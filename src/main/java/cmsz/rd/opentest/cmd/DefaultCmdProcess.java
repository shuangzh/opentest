package cmsz.rd.opentest.cmd;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;

/**
 * Created by admin on 2017/4/12.
 */
public class DefaultCmdProcess implements CmdProcess {
    Logger logger = LoggerFactory.getLogger(getClass());

    protected String cmdLine;

    private Process process;

    private File file;

    private Thread thread;

    private BufferedWriter bw;

    private String lastLine;

    private Integer exitValue;

    public DefaultCmdProcess(String cmdLine) {
        this.cmdLine = cmdLine;
    }

    public DefaultCmdProcess() {
    }

    public void setCmdLine(String cmdline) {
        this.cmdLine = cmdline;
    }

    public String getProcessName() {
        return cmdLine;
    }


    public void start() throws IOException {
        Runtime rt = Runtime.getRuntime();
        process = rt.exec(cmdLine);
        file = File.createTempFile("OT_", ".out");
        bw = new BufferedWriter(new FileWriter(file));

        thread = new Thread(new Runnable() {
            public void run() {
                BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line = null;
                try {
                    logger.info("CmdProcess [{}]\t[[[", cmdLine);
                    while ((line = br.readLine()) != null) {
                        bw.write(line);
                        logger.info(line);
                        if (StringUtils.isNotBlank(line))
                            lastLine = line;
                    }
                    logger.info("CmdProcess [{}]\t]]]", cmdLine);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                try {
                    bw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                try {
                    exitValue = process.waitFor();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();

    }

    public Integer waitFor() {
        if (exitValue != null)
            return exitValue;
        else {
            try {
                int ret = process.waitFor();
                thread.join();
                return ret;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    public File getStdoutFile() {
        return file;
    }

    public String getLastStdoutLine() {
        return lastLine;
    }

    public boolean isAlive() {
        return process.isAlive();
    }

    public Integer exitValue() {
        return waitFor();
    }

    public void destroy() {
        process.destroy();
    }

    public String getCmdLine() {
        return cmdLine;
    }
}
