package cmsz.rd.opentest;

import com.alibaba.druid.pool.DruidDataSource;
import org.apache.commons.lang.StringUtils;
import org.springframework.jdbc.core.JdbcTemplate;

import javax.sql.DataSource;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by admin on 2017/4/12.
 */
public class DatabaseBuilder {

    String name;
    String user;
    String passwd;
    String driver;
    String url;

    DatabaseBuilder setName(String dbname) {
        this.name = dbname;
        return this;
    }

    DatabaseBuilder setUser(String username) {
        this.user = username;
        return this;
    }

    DatabaseBuilder setPassword(String password) {
        this.passwd = password;
        return this;
    }

    DatabaseBuilder setDriverClass(String driverclass) {
        this.driver = driverclass;
        return this;
    }

    DatabaseBuilder setJdbcUrl(String jdbcUrl) {
        this.url = jdbcUrl;
        return this;
    }

    void build() {

        if (StringUtils.isBlank(name) || StringUtils.isBlank(user) || StringUtils.isBlank(driver) || StringUtils.isBlank(url) || StringUtils.isBlank(passwd)) {
            throw new RuntimeException("parameters are missing");
        }

        for (DbSource ds : dbSourceList) {
            if (ds.getName().equals(name))
                throw new RuntimeException("database [" + name + "] has already builded!");
        }

        DruidDataSource druidDataSource = new DruidDataSource();
        druidDataSource.setName(name);
        druidDataSource.setUsername(user);
        druidDataSource.setPassword(passwd);
        druidDataSource.setDriverClassName(driver);
        druidDataSource.setUrl(url);
        druidDataSource.setInitialSize(1);
        druidDataSource.setMaxActive(10);

        try {
            druidDataSource.init();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("database [" + name + "] initial failed !");
        }
        JdbcTemplate jdbcTemplate = new JdbcTemplate(druidDataSource);
        dbSourceList.add(new DbSource(name, druidDataSource, jdbcTemplate));

        this.name = null;
        this.user = null;
        this.passwd = null;
        this.driver = null;
        this.url = null;
    }

    private static List<DbSource> dbSourceList = new ArrayList<DbSource>();

    public static DataSource getDataSource(String dbname) {
        for (DbSource it : dbSourceList) {
            if (it.getName().equals(dbname))
                return it.getDataSource();
        }
        return null;
    }

    public static JdbcTemplate getJdbcTemple(String dbname) {
        for (DbSource it : dbSourceList) {
            if (it.getName().equals(dbname))
                return it.getJdbcTemplate();
        }
        return null;
    }

    class DbSource {
        String name;
        DataSource dataSource;
        JdbcTemplate jdbcTemplate;

        public DbSource(String name, DataSource dataSource, JdbcTemplate jdbcTemplate) {
            this.name = name;
            this.dataSource = dataSource;
            this.jdbcTemplate = jdbcTemplate;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public DataSource getDataSource() {
            return dataSource;
        }

        public void setDataSource(DataSource dataSource) {
            this.dataSource = dataSource;
        }

        public JdbcTemplate getJdbcTemplate() {
            return jdbcTemplate;
        }

        public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
            this.jdbcTemplate = jdbcTemplate;
        }
    }


}
