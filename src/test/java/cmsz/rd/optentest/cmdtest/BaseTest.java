package cmsz.rd.optentest.cmdtest;

import cmsz.rd.opentest.cmd.CmdProcess;
import cmsz.rd.opentest.cmd.DefaultCmdProcess;
import cmsz.rd.opentest.cmd.ProcessBase;
import cmsz.rd.opentest.file.creator.FieldConf;
import cmsz.rd.opentest.file.validator.Field;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;

/**
 * Created by admin on 2017/4/11.
 */

public class BaseTest {
    Logger logger= LoggerFactory.getLogger(getClass());

    public void processTest() throws IOException {
        Process process= ProcessBase.exec("ssh pi@192.168.0.7 '/usr/local/sbin/tsh'");
        logger.info("Begin to EXECUTE");
        BufferedReader  br=new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));
        String line = null;
        while ( (line = br.readLine()) != null)
            System.out.println(line);
    }


    public void cmdProcessTest() throws IOException {
        CmdProcess cmdProcess = new DefaultCmdProcess("ls -l");
        cmdProcess.start();
        System.out.println("process-name:"+ cmdProcess.getProcessName());
        System.out.println("process-cmdline:"+cmdProcess.getCmdLine());
        System.out.println("process-lastline:"+cmdProcess.getLastStdoutLine());
        System.out.println("process-exitValue:"+cmdProcess.exitValue());
        cmdProcess.waitFor();
        System.out.println("process-lastline:"+cmdProcess.getLastStdoutLine());
        cmdProcess.destroy();
        File file=cmdProcess.getStdoutFile();
        System.out.println("process-stdoutfile:"+file.getAbsolutePath());
    }

    @Test
    public void shellTest() throws IOException {
        System.out.println(System.getProperty("user.dir"));
        FieldConf fileConf = new FieldConf();
        fileConf.setName("st");
        fileConf.setValue("hha");
        fileConf.setFormat("format");
        fileConf.setLen(4);
        fileConf.setP1(1);
        fileConf.setP2(10);

        ObjectMapper mapper = new ObjectMapper();
        String json=mapper.writeValueAsString(fileConf);
        System.out.println(json);
        String jj="{\"name\":\"st\",\"format\":\"format\",\"len\":4,\"p1\":1,\"p2\":10,\"gen\":\"repeat\"}";
        FieldConf obj= mapper.readValue(jj, FieldConf.class);

        String ns= String.format("%9s",8);
        System.out.println(ns);


    }

}
